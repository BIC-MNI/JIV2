<project name="jiv" default="dist" basedir=".">
	<description>
        Java Image Viewer by Chris Cocosco
    </description>
	<!-- set global properties for this build -->
	<property name="src" location="jiv"/>
	<property name="build" location="build"/>
	<property name="dist"  location="dist"/>
	<property name="jivVersion" value="2.4"/>

	<!-- location specific variables, which can be overridden with -Dname=value, such as -Dprefix=/usr/local -->
	<property name="prefix" value="/export/data/jharlap/test"/>
<!--	<property name="prefix" value="/usr/local/mni"/> -->
	<property name="webRootPath" value="/data/web/prod/htdocs"/>
	<property name="webHostName" value="http://www.bic.mni.mcgill.ca"/>

	<property name="installSharePath" value="${prefix}/share/jiv" />
	<property name="installDocPath" value="${prefix}/share/doc/jiv" />
	<property name="installBinPath" value="${prefix}/bin" />

	<target name="help">
	<echo>Variables that can be overridden are:
   prefix         The prefix into which everything gets installed
   webRootPath    The path to the web root, such as /var/www/htdocs
   webHostName    The hostname of the web host, such as http://www.bic.mni.mcgill.ca
	</echo>
	<fail message="Help requested, not building"/>
	</target>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
	</target>

	<target name="testForUnix"
        description="Checks to make sure the OS is a UN*X variant">
		<condition property="isUnix">
			<os family="unix"/>
		</condition>
	</target>

	<target name="testForPerl5" depends="testForUnix" if="isUnix"
        description="Checks to make sure perl5 is available">
		<!-- Check for perl5 -->

		<exec executable="which" resultproperty="perl5Exists" outputProperty="perl5Path">
			<arg value="perl5"/>
		</exec>

		<condition property="isPerl5Available">
			<equals arg1="0" arg2="${perl5Exists}"/>
		</condition>
	</target>

	<target name="testForPerl" depends="testForPerl5" if="isUnix"
        description="Checks to make sure perl is available">
		<!-- Check for perl -->
		<exec executable="which" resultproperty="perlExists" outputProperty="perlXPath">
			<arg value="perl"/>
		</exec>

		<condition property="isPerlXAvailable">
			<equals arg1="0" arg2="${perlExists}"/>
		</condition>

		<condition property="isPerlAvailable">
		   <or>
			   <isset property="isPerl5Available"/>
				<isset property="isPerlXAvailable"/>
		   </or>
		</condition>

		<condition property="perlPath" value="${perl5Path}">
			<isset property="isPerl5Available"/>
		</condition>
		<condition property="perlPath" value="${perlXPath}">
			<isset property="isPerlXAvailable"/>
		</condition>

	</target>

	<target name="compile" depends="init"
        description="compile the source " >
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}"/>
	</target>

	<target name="compilePerl" depends="init,testForPerl" if="isPerlAvailable"
        description="compile the perl scripts" >
		<!-- Do the string replacements on the Perl scripts -->
		<loadfile property="SSIInclude" srcFile="util/ssi_insert.html" />
		<mkdir dir="${build}/util"/>
		<copy todir="${build}/util/">
			<fileset dir="util">
				<include name="*.pl" />
			</fileset>

			<filterset begintoken="x" endtoken="x">
				<filter token="PERL" value="${perlPath}" />
				<filter token="WEBROOTPATH" value="${webRootPath}" />
				<filter token="WEBHOSTNAME" value="${webHostName}" />
				<filter token="SSIMESSAGE" value="${SSIInclude}" />
				<filter token="JIVJARPATH" value="${installSharePath}/jiv-${jivVersion}.jar" />
			</filterset>
		</copy>

		<fixcrlf srcdir="${build}/util">
			<include name="*.pl"/>
		</fixcrlf>

		<chmod perm="ugo+rx" dir="${build}/util">
			<include name="*.pl" />
		</chmod>		

	</target>

	<target name="dist" depends="compile"
        description="generate the distribution" >
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}"/>

		<!-- Copy the COPYING file over -->
		<copy file="COPYING" todir="${build}"/>

		<!-- Create the epm-header -->
		<copy file="epm-header.in" tofile="epm-header">
			<filterset begintoken="x" endtoken="x">
				<filter token="VERSION" value="${jivVersion}" />
			</filterset>
		</copy>

		<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
		<jar jarfile="${dist}/jiv-${jivVersion}.jar" basedir="${build}"/>
	</target>

	<target name="testForLatex" depends="testForUnix" if="isUnix"
        description="Checks to make sure pdflatex is available">
		<exec executable="which" resultproperty="latexExists">
			<arg value="pdflatex"/>
		</exec>

		<condition property="isLatexAvailable">
			<equals arg1="0" arg2="${latexExists}"/>
		</condition>
	</target>

	<target name="pdfs" depends="testForLatex" if="isLatexAvailable"
        description="Runs pdflatex to produce documentation">
		<exec dir="doc" executable="pdflatex">
			<arg value="manual"/>
		</exec>

		<exec dir="doc" executable="pdflatex">
			<arg value="help"/>
		</exec>
	</target>

	<target name="installPerl" depends="compilePerl"
        description="install perl scripts" >
	   <!-- Create the install dirs -->
		<mkdir dir="${installBinPath}"/>

		<!-- Copy the files over -->
		<!-- Into the bin dir -->
		<copy todir="${installBinPath}">
			<fileset dir="${build}/util">
				<include name="*.pl"/>
			</fileset>
		</copy>

		<chmod perm="ugo+rx" dir="${installBinPath}" includes="jiv.pl jivpublish.pl minc2jiv.pl"/>
	</target>

	<target name="install" depends="dist,pdfs,installPerl"
        description="install everything" >
	   <!-- Create the install dirs -->
		<mkdir dir="${installSharePath}"/>
		<mkdir dir="${installDocPath}"/>

		<!-- Copy the files over -->
		<!-- Into the share dir -->
		<copy file="${dist}/jiv-${jivVersion}.jar" todir="${installSharePath}"/>

		<!-- Into the doc dir -->
		<copy todir="${installDocPath}">
			<fileset dir="doc">
				<include name="*.pdf"/>
			</fileset>
		</copy>

	</target>

	<target name="clean"
        description="clean up" >
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete>
			<fileset dir="doc" includes="*.pdf *.aux *.log *.dvi"/>
		</delete>
		<delete file="epm-header"/>
	</target>
</project>

