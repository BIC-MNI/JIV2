{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19120\viewh18900\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0     /** \
     * Member (inner) class: the textual coordinate display/input\
     * boxes ("fields").\
     *\
     */\
    /*private*/ final class CoordinateFields extends LightweightPanel \
	implements CoordinateTypes, ActionListener, PositionListener, PositionGenerator \{\
\
	int			coordinates_type= WORLD_COORDINATES;\
	ChoiceMenu	coords_type_menu;\
	\
	TextField	x_field_mni;\
	TextField	y_field_mni;\
	TextField	z_field_mni;\
\
	TextField	x_field_native;\
	TextField	y_field_native;\
	TextField	z_field_native;\
\
	TextField	fig_field_atlas;\
	TextField	lat_field_atlas;\
	TextField	sup_field_atlas;\
\
	TextField	atlas_label_field;\
	TextField	intensity_value_field;\
\
	Vector 		event_listeners;\
\
	Point3Dfloat 	world_cursor;		/** world coordinates in mni space */\
	Point3Dint 	voxel_cursor;		/** voxel coordinates in mni space */\
	Point3Dfloat 	world_cursor_nat;	/** world coordinates in native space */\
	Point3Dint 	voxel_cursor_nat;	/** voxel coordinates in native space */\
	AtlasCoords	atlas_coords;		/** atlas coordinates in mni space */\
	String 		atlas_label;		/** atlas label in mni space */\
\
	Point3Dint __actionPerformed_voxel= new Point3Dint();//for the exclusive private/internal use of actionPerformed\
\
	protected CoordinateFields( Point3Dfloat initial_world_cursor,\
				    PopupMenu popup_menu,\
				    boolean enable_world_coords\
				    ) \{\
\
	    set: world_cursor, voxel_cursor, world_cursor_nat\
		voxel_cursor_nat, atlas_coords, atlas_label\
\
	    set: coordinates_type\
	    create: coords_type_menu= new ChoiceMenu( "Coordinates type",\
					      menu_definition, default_menu_selection,  al); \
	    popup_menu.add( coords_type_menu);\
\
	    create: gbc= new GridBagConstraints();\
	    create: x_field_mni= _add_field_with_label( "X", "", tf_width, tf_span, gbc);\
	    create: y_field_mni= _add_field_with_label( "Y", "", tf_width, tf_span, gbc);\
	    create: z_field_mni= _add_field_with_label( "Z", "", tf_width, tf_span, gbc);\
	    create: x_field_native= _add_field_with_label( "Xnat", "", tf_width, tf_span, gbc);\
	    create: y_field_native= _add_field_with_label( "Ynat", "", tf_width, tf_span, gbc);\
	    create: z_field_native= _add_field_with_label( "Znat", "", tf_width, tf_span, gbc);\
	    create: fig_field_atlas= _add_field_with_label( "Fig", "", tf_width, tf_span, gbc);\
	    create: lat_field_atlas= _add_field_with_label( "Lat", "", tf_width, tf_span, gbc);\
	    create: sup_field_atlas= _add_field_with_label( "Sup", "", tf_width, tf_span, gbc);\
\
	    //update textfields and ??\
	    
\f1\i \ul do: positionChanged
\f0\i0 \ulnone ( new PositionEvent( CoordinateFields.this, \
						PositionEvent.ALL,\
						world_cursor ) );\
\
	    // The non-editable voxel intensity & atlas label display fields:\
	    set: voxel_value= _getVoxelValue( voxel_cursor);\
\
		set: atlas_label= _getLabelValue( voxel_cursor);\
		create: atlas_label_field= _add_field_with_label( "L",\
						atlas_label,\
						ATLAS_LABEL_TEXTFIELD_WIDTH,\
						3,\
						gbc);\
		create: intensity_value_field= _add_field_with_label( "I",\
						_voxel2string( voxel_value), \
						//byte_voxel_values ? 3 : \
						//IMAGE_VALUE_TEXTFIELD_WIDTH,\
						tf_width,\
						tf_span,\
						gbc);\
		intensity_value_field.setEditable( false);\
		atlas_label_field.setEditable( false);\
\
	    //Make textfields listen to class, and class listen to itself (so each textfield hears each other)\
	    this.addPositionListener( this); \
	    x_field_mni.addActionListener( this);\
	    y_field_mni.addActionListener( this);\
	    z_field_mni.addActionListener( this);\
	    x_field_native.addActionListener( this);\
	    y_field_native.addActionListener( this);\
	    z_field_native.addActionListener( this);\
	    fig_field_atlas.addActionListener( this);\
	    lat_field_atlas.addActionListener( this);\
	    sup_field_atlas.addActionListener( this);\
	\}\
	\
\
\
	// This is only performed when textfield position events are changed - not when mouse cursor is moved!\
	final void _firePositionEvent( final PositionEvent e) \{\
	    // deliver the event to each of the listeners - textfields only??\
		set: PositionListener) pl= event_listeners.elementAt( i)\
		
\f1\i do: pl.positionChanged( e)
\f0\i0 \
	\}\
\
	synchronized /*private*/ final void changeCoordinatesType() \{ \
		..uninteresting..\
	    
\f1\i \ul do: positionChanged
\f0\i0 \ulnone ( pe);\
	\}\
\
\
	/** This is only performed when a textfield is altered, not when mouse is clicked*/\
	synchronized public final void actionPerformed( ActionEvent ae) \{\
\
	    get: world_cursor, voxel_cursor, world_cursor_nat\
		voxel_cursor_nat, atlas_coords\
\
	    set: new_value= ae.getActionCommand()\
\
	    //uses implementation in Individual or CombinedDataVolumePanel..\
	    set: max_dimension_size= get*Size() //according to which xyz textfield is changed\
\
	    // remember: the event producer should \
	    check that new_value is in range ( > 0 and < max_dimension_size)\
\
	    set: voxel_cursor.* = new_value //according to which xyz textfield is changed\
	    set: pos_event_mask= PositionEvent.* //according to which xyz textfield is changed\
	    update: world_cursor using CoordConv.voxel2world\
					(and CoordConv.native2mni if needed)\
					or CoordConv.atlas2mni\
\
	    create: pe= new PositionEvent( CoordinateFields.this, \
					pos_event_mask, \
					world_cursor )\
	    
\f1\i \ul do: _firePositionEvent
\f0\i0 \ulnone ( pe)\
\
	\} // end of actionPerformed()\
\
\
	/** This method only directly changes the textfields and not the viewports. */\
	synchronized final public void positionChanged( PositionEvent e) \{\
\
	    get: world_cursor, voxel_cursor, world_cursor_nat\
		voxel_cursor_nat, atlas_coords\
\
	    //Adjust the world_cursor to the new PositionEvent\
	    if( e.isXChanged())\
		world_cursor.x= e.getX();\
	    if( e.isYChanged())\
		world_cursor.y= e.getY();\
	    if( e.isZChanged())\
		world_cursor.z= e.getZ();\
\
	    //update other cursors\
	    update: voxel_cursor, world_cursor_nat, voxel_cursor_nat, atlas_coords\
\
	    // Next, reset the textfields to display the new cursor position:\
\
	    // No matter if voxel or world coords, atlas coords and intensity are always the same\
	    update: fig_field_atlas.setText( String.valueOf( atlas_coords.fig));\
	    update: lat_field_atlas.setText( String.valueOf( atlas_coords.lat));\
	    update: sup_field_atlas.setText( String.valueOf( atlas_coords.sup));\
	    if( intensity_value_field != null) \{\
		get: new_voxel_value= _getVoxelValue( voxel_cursor);\
		get: new_atlas_label= _getLabelValue( voxel_cursor);\
		update: intensity_value_field.setText( _voxel2string( new_voxel_value));\
		update: atlas_label_field.setText(new_atlas_label);\
	    \}\
\
	    if( VOXEL_COORDINATES == coordinates_type) \{\
		/* == VOXEL COORDINATES == */\
		if( e.isXChanged())\{\
		    x_field_mni.setText( String.valueOf( voxel_cursor.x));\
		    x_field_native.setText( String.valueOf( voxel_cursor_nat.x));\
		\}\
		..\
		return;\
	    \}\
	    /* == WORLD COORDINATES == */\
	    if( e.isXChanged())\{\
		x_field_mni.setText( String.valueOf( world_cursor.x));\
		x_field_native.setText( String.valueOf( world_cursor_nat.x));\
	    \}\
	    ..\
\
	\} // end of positionChanged()\
\
\
\
\
\
	/** convenience method */\
	TextField _add_field_with_label( String text_label,\
						     String initial_content,\
						     int width,\
						     int span_columns,\
						     GridBagConstraints gbc) \{\
	    TextField text_field= new TextField( initial_content, width);\
	    add( new Label( text_label + ":"), gbc);\
	    add( text_field, gbc);\
	    return text_field;\
	\}\
\
\
	final public int getMaxSliceNumber() \{ return -1; \}\
	final public float getOrthoStep() \{ return Float.NaN; \}\
\
	synchronized public void addPositionListener( PositionListener pl) \{    \}\
\
	synchronized public void removePositionListener( PositionListener pl) \{    \}\
\
	/** returns the current cursor position (in world coordinates) */\
	public Point3Dfloat getCursorPosition() \{ return world_cursor; \}\
\
    \} // end of class CoordinateFields}